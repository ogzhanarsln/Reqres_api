{
	"info": {
		"_postman_id": "bebe062c-ba6f-459e-bb74-9e8bb07aa6f6",
		"name": "Reqres Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27573701"
	},
	"item": [
		{
			"name": "GET",
			"item": [
				{
					"name": "reqres.in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check the response status code\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}",
							"host": [
								"{{base_url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "POST",
			"item": [
				{
					"name": "Registrer Successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check the response status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Check if the response body is not empty\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"// Check if the response contains a specific property\r",
									"pm.test(\"Response contains property 'token'\", function () {\r",
									"    pm.response.to.have.jsonBody('token');\r",
									"});\r",
									"\r",
									"// Check if the response property has a specific value\r",
									"pm.test(\"Value of 'token' property is not null\", function () {\r",
									"    pm.expect(pm.response.json().token).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/register",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Unseccessful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check the response status code\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Check if the response body is not empty\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"// Check if the response contains an error message\r",
									"pm.test(\"Response contains error message\", function () {\r",
									"    pm.response.to.have.jsonBody('error');\r",
									"});\r",
									"\r",
									"// Check if the error message matches the expected value\r",
									"pm.test(\"Error message is correct\", function () {\r",
									"    pm.expect(pm.response.json().error).to.eql(\"Missing password\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"sydney@fife\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/register?QpwL5tke4Pnpja7X4=4",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"register"
							],
							"query": [
								{
									"key": "QpwL5tke4Pnpja7X4",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const url = 'https://reqres.in/api/login';\r",
									"const payload = {\r",
									"  \"email\": \"eve.holt@reqres.in\",\r",
									"  \"password\": \"cityslicka\"\r",
									"};\r",
									"\r",
									"pm.sendRequest({\r",
									"  url: url,\r",
									"  method: 'POST',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json'\r",
									"  },\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: JSON.stringify(payload)\r",
									"  }\r",
									"}, function (err, response) {\r",
									"  if (err) {\r",
									"    console.error('Error:', err);\r",
									"    return;\r",
									"  }\r",
									"  \r",
									"  console.log('Response:', response.json());\r",
									"  \r",
									"  // Check the 200 Created status code\r",
									"  pm.test(\"Response status is 200 Created\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"  });\r",
									"\r",
									"  pm.test(\"Value of 'token' property is not null\", function () {\r",
									"    pm.expect(pm.response.json().token).to.not.be.null;\r",
									"});\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"cityslicka\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/login",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Unsuccessful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const url = 'https://reqres.in/api/login';\r",
									"const payload = {\r",
									"  \"email\": \"peter@klaven\"\r",
									"};\r",
									"\r",
									"pm.sendRequest({\r",
									"  url: url,\r",
									"  method: 'POST',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json'\r",
									"  },\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: JSON.stringify(payload)\r",
									"  }\r",
									"}, function (err, response) {\r",
									"  if (err) {\r",
									"    console.error('Error:', err);\r",
									"    return;\r",
									"  }\r",
									"  \r",
									"  console.log('Response:', response.json());\r",
									"  \r",
									"  // Check the response status code\r",
									"  pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"  });\r",
									"\r",
									"  // Check if the response body is not empty\r",
									"  pm.test(\"Response body is not empty\", function () {\r",
									"    pm.response.to.have.body();\r",
									"  });\r",
									"  \r",
									"  // Check if the response contains an error message\r",
									"  pm.test(\"Response contains error message\", function () {\r",
									"    pm.response.to.have.jsonBody('error');\r",
									"  });\r",
									"\r",
									"  // Check if the error message matches the expected value\r",
									"  pm.test(\"Error message is correct\", function () {\r",
									"    pm.expect(pm.response.json().error).to.eql(\"Missing password\");\r",
									"  });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"peter@klaven\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/login",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check the response status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Check if the response body is not empty\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"// Check if the response contains a message\r",
									"pm.test(\"Response contains message\", function () {\r",
									"    pm.response.to.have.jsonBody({});\r",
									"});\r",
									"\r",
									"// Check if the success message matches the expected value\r",
									"pm.test(\"Success message is correct\", function () {\r",
									"    pm.expect(pm.response.json().success).to.eql({});\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"cityslicka\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/logout",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PUT",
			"item": [
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check the response status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Check if the response body is not empty\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"// Check if the response contains the updated user's name\r",
									"pm.test(\"Response contains updated user name\", function () {\r",
									"    pm.response.to.have.jsonBody('name');\r",
									"});\r",
									"\r",
									"// Check if the updated user's name matches the expected value\r",
									"pm.test(\"Updated user name is correct\", function () {\r",
									"    pm.expect(pm.response.json().name).to.eql(\"morpheus\");\r",
									"});\r",
									"\r",
									"// Check if the response contains the updated user's job\r",
									"pm.test(\"Response contains updated user job\", function () {\r",
									"    pm.response.to.have.jsonBody('job');\r",
									"});\r",
									"\r",
									"// Check if the updated user's job matches the expected value\r",
									"pm.test(\"Updated user job is correct\", function () {\r",
									"    pm.expect(pm.response.json().job).to.eql(\"zion resident\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/users/2",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Unseccussfull",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check the response status code\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Check if the response body is not empty\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"// Check if the response contains an error message for the name field\r",
									"pm.test(\"Response contains error message for the name field\", function () {\r",
									"    pm.expect(pm.response.json().error).to.eql(\"Validation Failed\");\r",
									"    pm.expect(pm.response.json().errors.name).to.eql(\"name must be a string\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/users/????",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"users",
								""
							],
							"query": [
								{
									"key": "???",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DELETE",
			"item": [
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check the response status code\r",
									"pm.test(\"Status code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"// Check if the response body is empty\r",
									"pm.test(\"Response body is empty\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/users/2",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Unsuccessful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check the response status code\r",
									"pm.test(\"Status code is 404 Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"// Check if the response body is not empty\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"// Check if the response contains an error message\r",
									"pm.test(\"Response contains error message\", function () {\r",
									"    pm.expect(pm.response.json().error).to.eql(\"User not found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/users/2135484612",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"users",
								"2135484612"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Documents",
			"item": []
		}
	]
}